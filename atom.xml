<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寒冬之音</title>
  
  <subtitle>hope</subtitle>
  <link href="https://hyong1232.github.io/atom.xml" rel="self"/>
  
  <link href="https://hyong1232.github.io/"/>
  <updated>2020-12-22T15:57:40.000Z</updated>
  <id>https://hyong1232.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程</title>
    <link href="https://hyong1232.github.io/2020/12/22/duo-xian-cheng/"/>
    <id>https://hyong1232.github.io/2020/12/22/duo-xian-cheng/</id>
    <published>2020-12-22T15:26:26.000Z</published>
    <updated>2020-12-22T15:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承Thread类实现多线程"><a href="#继承Thread类实现多线程" class="headerlink" title="继承Thread类实现多线程"></a>继承Thread类实现多线程</h2><blockquote><p>run方法里面要运行的内容和线程是在一起的，要多线程就要创建多个实现的实例对象</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    T1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T1 t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    R1 r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>继承的方法中可以不写super直接调用getName方法？？？（可能加了final关键字）<br>```java<br>/**</li></ul><ul><li>Returns this thread’s name.</li><li></li><li>@return  this thread’s name.</li><li>@see     #setName(String)</li><li>/<br>public final String getName() {<br>   return new String(name, true);<br>}<pre><code></code></pre></li></ul><h2 id="实现Runable接口实现多线程"><a href="#实现Runable接口实现多线程" class="headerlink" title="实现Runable接口实现多线程"></a>实现Runable接口实现多线程</h2><blockquote><p>run方法里面要运行的内容和线程分开，要多线程就要创建多个对象线程，并把实现的Runnable对象作为初值赋给他们</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">R1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;继承Thread类实现多线程&quot;&gt;&lt;a href=&quot;#继承Thread类实现多线程&quot; class=&quot;headerlink&quot; title=&quot;继承Thread类实现多线程&quot;&gt;&lt;/a&gt;继承Thread类实现多线程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;run方法里面要运</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="多线程" scheme="https://hyong1232.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="thread" scheme="https://hyong1232.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>对象常用方法</title>
    <link href="https://hyong1232.github.io/2020/12/21/dui-xiang-chang-yong-fang-fa/"/>
    <id>https://hyong1232.github.io/2020/12/21/dui-xiang-chang-yong-fang-fa/</id>
    <published>2020-12-21T15:13:24.000Z</published>
    <updated>2020-12-22T14:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> x<span class="token punctuation">;</span>    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    point other <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> other<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"point [x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y="</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ul><li>字符串不可变，进行大规模拼接效率低,使用StringBuilder代替拼接。</li><li>字符串创建对象如果第一次会在常量池中创建，再次使用会引用相同的常量池的值。<pre class="line-numbers language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>String s2 <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>String类型的运算也有编译优化，如果直接使用+号拼接，每一个+号会创建两个对象。<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先创建一个StringBuffer然后拼接后再转成一个新的String对象</span>String ss <span class="token operator">=</span> <span class="token string">"c"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span>String sss <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ss == sss =>true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hashCode方法&quot;&gt;&lt;a href=&quot;#hashCode方法&quot; class=&quot;headerlink&quot; title=&quot;hashCode方法&quot;&gt;&lt;/a&gt;hashCode方法&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="常见方法" scheme="https://hyong1232.github.io/tags/%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    
    <category term="String" scheme="https://hyong1232.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>抽象类</title>
    <link href="https://hyong1232.github.io/2020/12/21/chou-xiang-lei/"/>
    <id>https://hyong1232.github.io/2020/12/21/chou-xiang-lei/</id>
    <published>2020-12-21T14:59:21.000Z</published>
    <updated>2020-12-21T15:10:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>有abstract关键字，不一定有抽象方法</li><li>有抽象方法的，一定是抽象类</li><li>有构造方法（用于子类的创建），但不能创建实例，要实现方法的子类来创建实例</li><li></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote><p>猜游戏</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试实例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择猜游戏：1>猜数字，2>猜字母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GuessGame g<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessLetterGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessNumberGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    g<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String rand <span class="token operator">=</span> <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，猜："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>rand<span class="token punctuation">,</span> inp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜对了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span>String rand<span class="token punctuation">,</span> String inp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> String <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现子类1</span><span class="token keyword">class</span> <span class="token class-name">GuessNumberGame</span> <span class="token keyword">extends</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span>String rand<span class="token punctuation">,</span> String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> difference <span class="token operator">=</span> r <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>difference <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>difference <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> r <span class="token operator">==</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入1个1到100之间的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现子类2</span><span class="token keyword">class</span> <span class="token class-name">GuessLetterGame</span> <span class="token keyword">extends</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"abcdefghijkomnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>rand<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入五个字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span>String rand<span class="token punctuation">,</span> String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rand<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> inp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> inp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        b<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        String result <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">"A"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"B"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"5A0B"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StringBuilder是线程不安全（没有线程锁），但效率高，StringBuffer反之</li><li>StringBuilder的setCharAt(index,char)替换String的指定下标的char值</li><li>StringBuilder的delete(start,end)删除String从start到下标end的值</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有abstract关键字，不一定有抽象方法&lt;/li&gt;
&lt;li&gt;有抽象方法的，一定是抽象类&lt;/li&gt;
&lt;li&gt;有构造方法（用于子类</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="class" scheme="https://hyong1232.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>Stream流操作</title>
    <link href="https://hyong1232.github.io/2020/12/20/stream-liu-cao-zuo/"/>
    <id>https://hyong1232.github.io/2020/12/20/stream-liu-cao-zuo/</id>
    <published>2020-12-20T08:14:12.000Z</published>
    <updated>2020-12-20T16:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FileInputStream和FileOutputStream"><a href="#FileInputStream和FileOutputStream" class="headerlink" title="FileInputStream和FileOutputStream"></a>FileInputStream和FileOutputStream</h2><blockquote><p>读写文件必要的工具类，只有有了这两个类的实例才可操作文件内容。</p></blockquote><ul><li>创建对象既可以是文件路径String也可以是文件对象（File类型对象）</li><li>如果文件不存在/没有权限访问/无法创建返回FileNotFoundException</li></ul><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><blockquote><p>read(int)/(byte[],from,length)</p></blockquote><pre class="line-numbers language-java"><code class="language-java">FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x00000063</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">355</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x00000163</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x00d6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x00d0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">105</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随手关门</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><blockquote><p>write(int)/(byte[],from,length)</p></blockquote><pre class="line-numbers language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//随手关门</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一定要记得<strong>关闭资源</strong>，避免浪费系统资源</p></blockquote><h2 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h2><blockquote><p>使用byte数组来进行文件的操作速率会大幅的提升</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>File from<span class="token punctuation">,</span> File to<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单字节读写</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// byte数组读写,8k是读写的经验值，能效最大化</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组中读取的个数，防止最后一次多处理数值</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 随手关门</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ObjectInputStream和ObjctOutputStream文件序列化"><a href="#ObjectInputStream和ObjctOutputStream文件序列化" class="headerlink" title="ObjectInputStream和ObjctOutputStream文件序列化"></a>ObjectInputStream和ObjctOutputStream文件序列化</h2><blockquote><p>此方法用于保存对象的内容和状态，便于以后的读取复用。</p></blockquote><ul><li>需要实现标识类Serializable，并添加序列化版本ID，反序列化时版本不一致会有异常</li><li>static类变量和transient临时变量不会被序列化</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 编译器根据类的定义信息自动生成的serialVersoinID</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 12l<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", Score="</span> <span class="token operator">+</span> Score <span class="token operator">+</span> <span class="token string">", gender="</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> Score<span class="token punctuation">;</span>    <span class="token keyword">transient</span> String gender<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        Score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="writeObject-obj-序列化"><a href="#writeObject-obj-序列化" class="headerlink" title="writeObject(obj)序列化"></a>writeObject(obj)序列化</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializObj</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/obj.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="readObject-obj-反序列化"><a href="#readObject-obj-反序列化" class="headerlink" title="readObject(obj)反序列化"></a>readObject(obj)反序列化</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseSerializObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/obj.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reader和Writer类的字符编码转换"><a href="#Reader和Writer类的字符编码转换" class="headerlink" title="Reader和Writer类的字符编码转换"></a>Reader和Writer类的字符编码转换</h2><ul><li>多用于对字符串进行编码转换，若不指定转换编码，则默认转换为系统的编码（win：gbk，ios/linux：utf-8）</li><li>write()方法有三个重载的方法分别为String/byte[]/int（只写入char，即后两位的数值，前面补零）</li><li>java的编码转换都是用的char的字符转换（char使用unicode编码）</li><li>gbk和utf-8的中文编码字节量分别是2和3个字节</li></ul><h3 id="一般的字符串编码"><a href="#一般的字符串编码" class="headerlink" title="一般的字符串编码"></a>一般的字符串编码</h3><blockquote><p>使用String类型的getBytes([charset])和构造方法new String(byte[],[charset])完成编码转换</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> <span class="token string">"abc中"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> df <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> utf8 <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbk <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decodeStr</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decodeStr</span><span class="token punctuation">(</span>utf8<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decodeStr</span><span class="token punctuation">(</span>gbk<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decodeStr</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charset <span class="token operator">+</span> <span class="token string">"转换后的字符："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="InputStreamReader和OutpuStreamWriter"><a href="#InputStreamReader和OutpuStreamWriter" class="headerlink" title="InputStreamReader和OutpuStreamWriter"></a>InputStreamReader和OutpuStreamWriter</h3><blockquote><p>主要使用构造方法定义转换字符串的类型</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transferCN</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'\u4e00'</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token string">'\u9fa5'</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String charset<span class="token punctuation">,</span> String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BufferReader和BufferWriter"><a href="#BufferReader和BufferWriter" class="headerlink" title="BufferReader和BufferWriter"></a>BufferReader和BufferWriter</h3><blockquote><p>使用BufferReader的readLine()方法可以整行读取，前面必须有InputStreamReader转换编码。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bufferReadCN</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String tempStr<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tempStr <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tempStr <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FileInputStream和FileOutputStream&quot;&gt;&lt;a href=&quot;#FileInputStream和FileOutputStream&quot; class=&quot;headerlink&quot; title=&quot;FileInputStream和FileOutputSt</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="Stream" scheme="https://hyong1232.github.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>javaIO使用</title>
    <link href="https://hyong1232.github.io/2020/12/19/javaio-shi-yong/"/>
    <id>https://hyong1232.github.io/2020/12/19/javaio-shi-yong/</id>
    <published>2020-12-19T02:52:56.000Z</published>
    <updated>2020-12-20T08:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File对象常用api"><a href="#File对象常用api" class="headerlink" title="File对象常用api"></a>File对象常用api</h2><table><thead><tr><th>名称</th><th>释义</th><th>返回值类型</th><th>返回值</th></tr></thead><tbody><tr><td>exists()</td><td>是否存在文件文件对象</td><td>Boolean</td><td>存在返回true，其他为false</td></tr><tr><td>getAbsolutePath()</td><td>获取文件的完整路径</td><td>String</td><td>返回完整路径的字符串</td></tr><tr><td>getName()</td><td>获取当前文件的名称</td><td>String</td><td>返回文件的名称字符串</td></tr><tr><td>getParent/getParentFile()</td><td>获取文件的父节点路径</td><td>String</td><td>返回父节点的路径字符串</td></tr><tr><td>length()</td><td>获取文件包含的字节大小</td><td>long</td><td>返回包含字节量</td></tr><tr><td>isDirectory()</td><td>判定当前文件对象是否是文件夹</td><td>Boolean</td><td>是文件夹返回true，其他false</td></tr><tr><td>isFile()</td><td>判定是否是文件对象</td><td>Boolean</td><td>是true，无效/无权限等false</td></tr><tr><td>lastModified()</td><td>最后一次修改文件的时间</td><td>String</td><td>无效/无权限/不存在的文件返回0</td></tr></tbody></table><h2 id="用File对象增删文件-文件夹"><a href="#用File对象增删文件-文件夹" class="headerlink" title="用File对象增删文件/文件夹"></a>用File对象增删文件/文件夹</h2><ul><li><p>createNewFile()方法，创建一个新的文件，成功创建返回true</p><pre class="line-numbers language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/oo/xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new File()对象可以接收两个字符串一个父类路径，一个文件名称</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mkdir()/mkdirs()方法，创建一层/多层文件夹，创建成功返回true。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//oo/xx路径不存在</span>File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/oo/xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>mkdir()方法只能创建一层路径，如果创建的父路径不存在则报错</p></blockquote></li></ul><h2 id="list和listFiles方法的使用"><a href="#list和listFiles方法的使用" class="headerlink" title="list和listFiles方法的使用"></a>list和listFiles方法的使用</h2><blockquote><p>list对象返回所有子类的文件名字符串数组，listFiles返回的是子类文件对象的数组。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//统计文件字节值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入文件夹路径："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件夹大小为："</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">"字节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入正确的文件夹路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dir<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;File对象常用api&quot;&gt;&lt;a href=&quot;#File对象常用api&quot; class=&quot;headerlink&quot; title=&quot;File对象常用api&quot;&gt;&lt;/a&gt;File对象常用api&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="IO" scheme="https://hyong1232.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>java特殊问题记录</title>
    <link href="https://hyong1232.github.io/2020/12/16/java-te-shu-wen-ti-ji-lu/"/>
    <id>https://hyong1232.github.io/2020/12/16/java-te-shu-wen-ti-ji-lu/</id>
    <published>2020-12-16T15:07:55.000Z</published>
    <updated>2020-12-17T12:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在类中this的省略问题"><a href="#在类中this的省略问题" class="headerlink" title="在类中this的省略问题"></a>在类中this的省略问题</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量名不同，可以省略this</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> ag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> ag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此时如果省略this，那么对象的age就会赋不上值</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java中的变量采取就近原则，如果没有this特殊指定，它会自动寻找最近出现的变量作为他的值。</p></blockquote><h2 id="final关键字的编译器优化"><a href="#final关键字的编译器优化" class="headerlink" title="final关键字的编译器优化"></a>final关键字的编译器优化</h2><blockquote><p>上代码</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面代码中a和b如果不加final关键字，在运算时java会自动转换成int类型，那么这个表达式就是错误的，可是加了final关键字之后，c的值编译器就会自动优化成3，而不会有运算了，所以是正确的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在类中this的省略问题&quot;&gt;&lt;a href=&quot;#在类中this的省略问题&quot; class=&quot;headerlink&quot; title=&quot;在类中this的省略问题&quot;&gt;&lt;/a&gt;在类中this的省略问题&lt;/h2&gt;&lt;pre class=&quot;line-numbers language</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="特殊问题" scheme="https://hyong1232.github.io/tags/%E7%89%B9%E6%AE%8A%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>java异常</title>
    <link href="https://hyong1232.github.io/2020/12/14/java-yi-chang/"/>
    <id>https://hyong1232.github.io/2020/12/14/java-yi-chang/</id>
    <published>2020-12-14T14:50:11.000Z</published>
    <updated>2020-12-17T12:46:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常介绍"><a href="#异常介绍" class="headerlink" title="异常介绍"></a>异常介绍</h2><p>异常的特性：</p><ul><li>java异常方法默认都有一个throws RuntimeException，所以当程序有这种类型的异常或者他的子类异常出现时，通常我们不必自己添加异常管道。</li><li>如果不在程序中处理，异常将会一直抛出直到jvm，jvm会打印异常并退出程序。</li><li>处理异常只有两种方式，try-catch捕获和throws抛出</li></ul><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><pre class="line-numbers language-md"><code class="language-md">throwable顶级父类    |--Error不可修复，多见于系统级的问题（例如递归栈/内存溢出），保证程序安全退出即可    |--Exception        |--其他Exception           |--runtimeException           |--ArithmeticException           |--ArrayListIndexOutOfBoundsException           |--。。。等等异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="try-catch方法"><a href="#try-catch方法" class="headerlink" title="try-catch方法"></a>try-catch方法</h2><p>特性：<br>1、使用try-catch方法可以捕获多个异常，但要注意大的异常类要在后面捕获。<br>2、finally代码块内的代码一定会执行，无论try代码块中有无ruturn还是break及其他终止程序的关键字，都会执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入两个数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> sp <span class="token operator">=</span> inp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//无论是否有return等关键字都会执行finally内的代码</span><span class="token comment" spellcheck="true">// 输出：</span><span class="token comment" spellcheck="true">// 输入两个数字：</span><span class="token comment" spellcheck="true">// 12</span><span class="token comment" spellcheck="true">// java.lang.ArrayIndexOutOfBoundsException: 1</span><span class="token comment" spellcheck="true">// finly</span><span class="token comment" spellcheck="true">//     at day1214.ExceptionTset.main(ExceptionTset.java:11)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="throws抛出异常"><a href="#throws抛出异常" class="headerlink" title="throws抛出异常"></a>throws抛出异常</h2><p>特性：<br>1、使用throws关键字加在方法后面可以抛出多个异常。<br>2、往往需要抛出异常的代码块是它内部引用的方法已经有异常抛出，所以要继续抛出异常。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个时间："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"时间格式错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件路径错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抛出多个异常</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date d <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E://code/java/"</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//SimpleDateFarmat的parse方法抛出了ParseException异常，因此上面要跑出此异常</span><span class="token keyword">public</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException<span class="token punctuation">{</span>    ParsePosition pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParsePosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date result <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParseException</span><span class="token punctuation">(</span><span class="token string">"Unparseable date: \""</span> <span class="token operator">+</span> source <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token punctuation">,</span>            pos<span class="token punctuation">.</span>errorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="throw手动抛出异常"><a href="#throw手动抛出异常" class="headerlink" title="throw手动抛出异常"></a>throw手动抛出异常</h2><p>特性：<br>1、处理自定义的特殊情况，使用系统类型，自己抛出和捕获。<br>2、抛出的信息要准确描述特殊情况，打印的交互可以人性化一点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入两个浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> inp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> inp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">f</span><span class="token punctuation">(</span>inp1<span class="token punctuation">,</span> inp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//交互信息人性化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能除0是我们的错，请鞭笞我们吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> inp1<span class="token punctuation">,</span> <span class="token keyword">double</span> inp2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义特殊情况异常抛出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inp2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArithmeticException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"/by zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inp1 <span class="token operator">/</span> inp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常的特殊处理"><a href="#异常的特殊处理" class="headerlink" title="异常的特殊处理"></a>异常的特殊处理</h2><blockquote><p>当重写父类方法时，可能遇到父类的异常管道除了默认的RuntimeException外没有其他管道的情况，而本方法使用了有其他类型的异常的方法，这时就需要封装异常为RuntimeException或其子类的异常来转换异常的类型，从而抛出异常。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"2020-12-12"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-18"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-14"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-16"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//重写的compare方法不支持parseException类型的管道的添加，封装抛出</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Date d1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>                Date d2 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> d1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义异常的使用"><a href="#自定义异常的使用" class="headerlink" title="自定义异常的使用"></a>自定义异常的使用</h2><blockquote><p>在有特殊的程序需要我们单独处理时，可以自定异常的类型从而抛出，以便我们在后面的程序中处理，这时可以使用自定义的异常来处理。</p></blockquote><ul><li>创建自定义的异常的主要有三个部分即：1、继承的父类2、构造方法重写3、类名能表达异常的意义<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UserErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PwdErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//PwdErrorException继承的是Exception不是RuntimeException或他的子类，所以需要自己加抛出异常管道</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String user<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token keyword">throws</span> PwdErrorException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserErrorException</span><span class="token punctuation">(</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PwdErrorException</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;异常介绍&quot;&gt;&lt;a href=&quot;#异常介绍&quot; class=&quot;headerlink&quot; title=&quot;异常介绍&quot;&gt;&lt;/a&gt;异常介绍&lt;/h2&gt;&lt;p&gt;异常的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java异常方法默认都有一个throws RuntimeException，所以当程</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="Exception" scheme="https://hyong1232.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>matery主题踩坑记录</title>
    <link href="https://hyong1232.github.io/2020/12/14/matery-zhu-ti-cai-keng-ji-lu/"/>
    <id>https://hyong1232.github.io/2020/12/14/matery-zhu-ti-cai-keng-ji-lu/</id>
    <published>2020-12-13T16:02:48.000Z</published>
    <updated>2020-12-17T11:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用hexo快一年了，老是遇到坑，过一段时间又忘了，再找起来又得费一番功夫，记录下免得忘记。</p><h2 id="prism相关的代码样式冲突，-大括号转换的相关问题。"><a href="#prism相关的代码样式冲突，-大括号转换的相关问题。" class="headerlink" title="prism相关的代码样式冲突，{}大括号转换的相关问题。"></a>prism相关的代码样式冲突，{}大括号转换的相关问题。</h2><blockquote><p>hexo5.0内置了prism相关的功能，但是又和matery主题的使用相冲突，真的是坑死人了</p></blockquote><p>解决方法：<br>1、安装hexo-prism-plugin插件<br>2、屏蔽掉hexo自带的代码样式功能，直接注释掉自带的prism使用插件的配置。</p><pre class="line-numbers language-yml"><code class="language-yml">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'ghcolors'  line_number: true    # default false  custom_css:# prismjs:#   enable: true#   preprocess: true#   theme: 'tomorrow'#   line_number: true#   tab_replace: ''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、设置完之后你会发现颜色样式倒是可以了，但是{和}莫名其妙的被转换成了&#123;和&#125;!!!本想就这样放着，可我有老师忘不掉这个，而且他还影响阅读代码，真是要了命了。通过google大概知道了这个问题就是prism和hexo5自带的prism冲突引起的，解决办法有两个(原文地址)[<a href="https://github.com/blinkfox/hexo-theme-matery/issues/503]%EF%BC%9A">https://github.com/blinkfox/hexo-theme-matery/issues/503]：</a><br>    + 退回hexo4然后清除public文件重新生成<br>    + 删除hexo-prism-pluging插件<br>像我这样懒得人怎么可能会回退版本！删除插件代码高亮又称问题，于是我看了下hexo-prism-plugin的依赖代码，在他的index文件中的map中添加了大括号的匹配。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大功告成！！！，缺点是升级依赖可能就失效，还得重新改代码，算了就这样吧，睡觉咯！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;使用hexo快一年了，老是遇到坑，过一段时间又忘了，再找起来又得费一番功夫，记录下免得忘记。&lt;/p&gt;
&lt;h2 id=&quot;prism相关的代码样</summary>
      
    
    
    
    <category term="hexo" scheme="https://hyong1232.github.io/categories/hexo/"/>
    
    
    <category term="hexo-theme-matery" scheme="https://hyong1232.github.io/tags/hexo-theme-matery/"/>
    
    <category term="matery主题" scheme="https://hyong1232.github.io/tags/matery%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>dom垂直居中</title>
    <link href="https://hyong1232.github.io/2020/12/08/dom-chui-zhi-ju-zhong/"/>
    <id>https://hyong1232.github.io/2020/12/08/dom-chui-zhi-ju-zhong/</id>
    <published>2020-12-08T14:30:31.000Z</published>
    <updated>2020-12-17T11:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局实现垂直居中"><a href="#flex布局实现垂直居中" class="headerlink" title="flex布局实现垂直居中"></a>flex布局实现垂直居中</h2><iframe id="cp_embed_YzGWgKX" src="//codepen.io/hyong1232/embed/YzGWgKX?height=360&theme-id=dark&slug-hash=YzGWgKX&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="position-transfrom实现垂直居中"><a href="#position-transfrom实现垂直居中" class="headerlink" title="position+transfrom实现垂直居中"></a>position+transfrom实现垂直居中</h2><iframe id="cp_embed_yLaazGz" src="//codepen.io/hyong1232/embed/yLaazGz?height=360&theme-id=dark&slug-hash=yLaazGz&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="margin实现垂直居中"><a href="#margin实现垂直居中" class="headerlink" title="margin实现垂直居中"></a>margin实现垂直居中</h2><iframe id="cp_embed_wvzzPEp" src="//codepen.io/hyong1232/embed/wvzzPEp?height=360&theme-id=dark&slug-hash=wvzzPEp&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="line-height-vertical实现垂直居中（仅适用于图片文字）"><a href="#line-height-vertical实现垂直居中（仅适用于图片文字）" class="headerlink" title="line-height+vertical实现垂直居中（仅适用于图片文字）"></a>line-height+vertical实现垂直居中（仅适用于图片文字）</h2><iframe id="cp_embed_bGwwaEx" src="//codepen.io/hyong1232/embed/bGwwaEx?height=360&theme-id=dark&slug-hash=bGwwaEx&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="display-table实现垂直居中"><a href="#display-table实现垂直居中" class="headerlink" title="display:table实现垂直居中"></a>display:table实现垂直居中</h2><iframe id="cp_embed_gOwwoLe" src="//codepen.io/hyong1232/embed/gOwwoLe?height=360&theme-id=dark&slug-hash=gOwwoLe&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="grid布局实现垂直居中"><a href="#grid布局实现垂直居中" class="headerlink" title="grid布局实现垂直居中"></a>grid布局实现垂直居中</h2><iframe id="cp_embed_PoGGEJB" src="//codepen.io/hyong1232/embed/PoGGEJB?height=360&theme-id=dark&slug-hash=PoGGEJB&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flex布局实现垂直居中&quot;&gt;&lt;a href=&quot;#flex布局实现垂直居中&quot; class=&quot;headerlink&quot; title=&quot;flex布局实现垂直居中&quot;&gt;&lt;/a&gt;flex布局实现垂直居中&lt;/h2&gt;&lt;iframe id=&quot;cp_embed_YzGWgKX&quot; src</summary>
      
    
    
    
    <category term="css" scheme="https://hyong1232.github.io/categories/css/"/>
    
    
    <category term="css布局" scheme="https://hyong1232.github.io/tags/css%E5%B8%83%E5%B1%80/"/>
    
    <category term="layout" scheme="https://hyong1232.github.io/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>js中的常用数组操作函数</title>
    <link href="https://hyong1232.github.io/2020/10/31/js-zhong-de-chang-yong-shu-zu-cao-zuo-han-shu/"/>
    <id>https://hyong1232.github.io/2020/10/31/js-zhong-de-chang-yong-shu-zu-cao-zuo-han-shu/</id>
    <published>2020-10-31T07:25:53.000Z</published>
    <updated>2020-12-17T11:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用jQuery框架时要对数组元素进行操作，突然忘了该如何入手，借着这个机会总结下常见的数组操作方法。</p><h2 id="Array原型链上的数组操作属性"><a href="#Array原型链上的数组操作属性" class="headerlink" title="Array原型链上的数组操作属性"></a>Array原型链上的数组操作属性</h2><p>Array对象原型上有很多操作数组的属性，功能十分强大</p><h3 id="操作数组元素"><a href="#操作数组元素" class="headerlink" title="操作数组元素"></a>操作数组元素</h3><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><blockquote><p>Array.prototype.pop()方法删除数组的最后一个元素,返回删除的值</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>空数组上使用返回undefined</li><li>可用在类数组元素上，和push相同根据length确定组后一个元素位置，没有或不能转换length属性为数值则从<strong>下标0</strong>开始</li></ul></blockquote><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><blockquote><ul><li>Array.prototype.push(ele1,ele2,ele3…)方法将一个或多个元素添加到数组的最后,返回添加元素后的数组的长度</li><li>可通过call/apply作用于有length属性的类数组对象上</li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pigs'</span><span class="token punctuation">,</span> <span class="token string">'goats'</span><span class="token punctuation">,</span> <span class="token string">'sheep'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'bird'</span><span class="token punctuation">,</span><span class="token string">'duck'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">6</span><span class="token comment" spellcheck="true">//animals = ["pigs", "goats", "sheep", "bird", "duck", "cat"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>合并两个数组<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> animals1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'fox'</span><span class="token punctuation">,</span><span class="token string">'cow'</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>animals<span class="token punctuation">,</span><span class="token operator">...</span>animals1<span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">9</span><span class="token comment" spellcheck="true">//animals = ["pigs", "goats", "sheep", "bird", "duck", "cat", "dog", "fox", "cow"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>处理类数组元素，<strong>不可使用箭头函数</strong>，会把this绑定到window上<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>ele<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// add:e=>[].push.call(this,ele)错误的写法</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a = {0: "jack", length: 1, add: ƒ}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><blockquote><ul><li>Array.prototype.shift()方法删除数组的第一个元素，并返回他的值，</li><li>可通过call/apply作用于有length属性的类数组对象上</li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">1</span><span class="token comment" spellcheck="true">// a = [3,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><blockquote><p>Array.prototype.unshift(ele1,ele2,ele3….)方法一个或多个元素添加到数组的<strong>开头</strong>,并返回新的数组的<strong>长度</strong></p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><blockquote><p>Array.prototype.splice(start[, deleteCount[, item1[, item2[, …]]]])方法是使用的较多的数组操作函数，它既可以在指定下标添加/删除/替换数组元素。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'March'</span><span class="token punctuation">,</span> <span class="token string">'April'</span><span class="token punctuation">,</span> <span class="token string">'June'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除指定下标（start）开始的delecteCount个元素</span>months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在指定下标之前（start）添加元素</span>months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 替换指定下标的（start）元素</span>months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找和筛选数组元素"><a href="#查找和筛选数组元素" class="headerlink" title="查找和筛选数组元素"></a>查找和筛选数组元素</h3><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><blockquote><ul><li>Array.prototype.includes(valueToFind[, fromIndex])方法查询数组是否包含特定值，返回一个Boolean值</li><li>fromindex默认为0，同字符串indexof方法小于0从0开始，大于0直接返回-1</li><li>可被用于类数组对象</li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span> <span class="token boolean">true</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类数组应用<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>includes<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><blockquote><ul><li>Array.prototype.indexOf(searchValue[,fromindex=0])方法返回被查找元素首次出现的下标，没有则返回-1</li><li>fromindex默认为0，<strong>小于0时开始从后往前开始找，绝对值大于length属性则查找整个数组</strong>，大于length属性值时直接返回-1</li><li><strong>字符串</strong>fromindex开始查找位置默认为0，<strong>小于0从0开始</strong>，大于length属性值直接返回-1（查找元素为空’’时，直接返回length值）</li><li><strong>字符串</strong>的indexOf属性：省略searchValue，则方法强制设定他为’undefined’</li></ul></blockquote><ul><li>数组方法<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">></span> <span class="token number">0</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span> <span class="token number">0</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串方法<pre class="line-numbers language-js"><code class="language-js"><span class="token string">'undefined'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">0</span><span class="token string">'asdfas'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">1</span><span class="token string">'asdfas'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><blockquote><p>Array.prototype.some(callback(e[,index[,array]]))方法查找符合参数函数条件的元素，找到即返回true，否则返回false</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>e<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>同every一样空数组的some不管函数参数的条件如何都返回true</p></blockquote><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><blockquote><p>Array.prototype.every(function)方法验证数组中的元素是否都满足参数function函数中的判定条件，满足返回true有一个不满足就停止执行，并返回false</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>e<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote><p> Array.prototype.filter(function)方法同every方法一样，都使用参数函数遍历数组元素，与every不同的是filter将通过function参数的数组元素，封装成新数组然后返回这个新数组。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>e<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><blockquote><p>Array.prototype.find(function)方法也是提供筛选函数来查找元素，第一个符合条件的数组元素后返回元素并停止执行。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element <span class="token operator">=</span><span class="token operator">></span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><blockquote><p>Array.prototype.findIndex(function)同index一样，返回结果是对应条件的数组元素下标</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>element <span class="token operator">=</span><span class="token operator">></span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><blockquote><p>Array.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])方法返回累计处理的结果。</p></blockquote><table><thead><tr><th>参数</th><th>释义</th></tr></thead><tbody><tr><td>accumulator</td><td>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值</td></tr><tr><td>currentValue</td><td>数组中正在处理的元素。</td></tr><tr><td>index</td><td>数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</td></tr><tr><td>array</td><td>调用reduce()的数组</td></tr><tr><td>initalValue</td><td>作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//统计数组中值出现的次数（别忘了return你的sum值）</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>json对象的key值都是string</strong>,如果给其他类型是会自动转换成string的</p></blockquote><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote><p>Array.prototype.map(callback(ele[,index[,arrray]]))方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。<br>map方法只会在有值索引上被调用，从未赋值或使用delete删除过的索引不会调用回调<br>不需要返回值组成的新数组时，使用for of和forEach代替</p></blockquote><pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用map时简便写法的误区<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'234'</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">]</span><span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>出现这个结果，是因为parseInt(str,radix)方法接收两个参数，而map传递的第二个参数是index，导致parseInt方法误把index当成了他的进制基数，我们可以使用<strong>Number(str)方法</strong>代替即可<pre class="line-numbers language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><blockquote><p>1、Array.prototype.forEach(callback(currentValue [, index [, array]])[, thisArg])方法对数组的每个元素执行一次给定的函数,返回undefined或者说没有返回值。<br>2、回调函数会跳过未赋值或使用delete操作的索引的调用</p></blockquote><table><thead><tr><th>参数</th><th>释义</th></tr></thead><tbody><tr><td>currentValue</td><td>数组中正在处理的当前元素。</td></tr><tr><td>index</td><td>数组中正在处理的当前元素的索引。</td></tr><tr><td>array</td><td>forEach() 方法正在操作的数组。</td></tr><tr><td>thisArg</td><td>可选参数。当执行回调函数 callback 时，用作 this 的值。</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//跳过index为2时的索引调用</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">></span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组在迭代过程中被修改，执行调用的索引值不会变<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">'two'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  words<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token string">'one'</span><span class="token operator">></span> <span class="token string">'two'</span><span class="token operator">></span> <span class="token string">'four'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>复制对象<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> copyobj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> properNameArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  properNameArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">let</span> temppropertyDes <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>name<span class="token punctuation">)</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>copyobj<span class="token punctuation">,</span>name<span class="token punctuation">,</span>temppropertyDes<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> copyobj<span class="token punctuation">}</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span><span class="token keyword">const</span> copyobj <span class="token operator">=</span> <span class="token function">coypObj</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>thisArg应用<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Counter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> entry<span class="token punctuation">;</span>  <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj.count = 3 === (1 + 1 + 1)</span><span class="token comment" spellcheck="true">//obj.sum = 16 === (2 + 5 + 9)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、forEach方法不能在callback中终止（除非异常），使用for…in/for…of/every/some/find/findIndex方法代替</p></blockquote></li></ul><h3 id="转换成字符串"><a href="#转换成字符串" class="headerlink" title="转换成字符串"></a>转换成字符串</h3><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><blockquote><ul><li>Array.prototype.join([separator])方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，如果数组只有一个项目，那么将返回该项目而不使用分隔符。</li><li>null/undefined/调用对象的length属性为0时，调用此方法会被转换成空字符串’’ </li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>连接类数组的对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">joinarg</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">joinarg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token string">'1,3,6'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><blockquote><ul><li>Array.prototype.toString()方法覆盖了Object的toSting方法，返回一个用逗号隔开各个数组元素的字符串</li><li>和字符串拼接（+）时自动调用此方法</li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token string">"1,2,a,1a"</span><span class="token comment" spellcheck="true">//array1 = [-2, -1, 1, 2, 3]</span><span class="token comment" spellcheck="true">//字符串拼接</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'x'</span><span class="token operator">></span> <span class="token string">'1,4x'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取数组的键-值对方法"><a href="#获取数组的键-值对方法" class="headerlink" title="获取数组的键/值对方法"></a>获取数组的键/值对方法</h3><h4 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h4><blockquote><p>Array.prototype.entries方法返回一个包含每个索引的键/值对的Array iterator可迭代对象</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token keyword">of</span> array1<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token number">0</span> <span class="token string">"a"</span><span class="token operator">></span><span class="token number">1</span> <span class="token string">"b"</span><span class="token operator">></span><span class="token number">2</span> <span class="token string">"c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><blockquote><p>Array.prototype.values()方法返回一个包含每个索引值的值的Array Iterator对象</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><blockquote><p>Array.prototype.keys()方法返回一个包含数组中每个索引键的Array Iterator对象。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组可以使用Object方法？</span><span class="token keyword">var</span> sparseKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先运行keys方法返回迭代对象，然后使用扩展运算符解构扩展成数组</span><span class="token keyword">var</span> denseKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sparseKeys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['0', '2']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>denseKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><blockquote><p>Array.prototype.slice([begin[,end]])方法返回一个指定切割下标长度的新数组（可为原数组长度）<br>1、复制数组，<strong>不能复制元素为对象的数组元素</strong></p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token keyword">const</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'summer'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、获取数组最后一个元素，<strong>返回仍然是一个数组！！！</strong></p><pre class="line-numbers language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、剪切数组,生成新的数组</p><pre class="line-numbers language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在复制数组时，如果数组元素是对象，那么复制的数组只会复制这个对象的引用，就是说<strong>改变复制数组仍会改变元素组</strong></p></blockquote><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><blockquote><p>Array.prototype.concat(array1,array2…)用于连接两个或多个数组</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> Array <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><blockquote><ul><li>Array.prototype.reverse()方法颠倒数组元素</li><li>可通过call/apply作用于有length属性的类数组对象上</li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//类数组</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><blockquote><ul><li>Array.prototype.sort([compareFunction])方法默认按各个数组元素转换成字符串后的utf-16代码单元值序列排序,并返回改变了排序后的<strong>原数组</strong></li><li>可选参数compareFunction(v1,v2)函数有两个必传值，可在此函数内自定义排序规则</li></ul></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//默认排序</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//自定义排序(降序)</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">Number</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token operator">></span><span class="token function">Number</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">Number</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//升序</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">Number</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">Number</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义排序函数依次遍历比较数组元素时，如果函数的返回值如果相等位置不变，大于0则e1排在e2的前面，小于0反之。</p></blockquote><h2 id="Array对象的静态方法"><a href="#Array对象的静态方法" class="headerlink" title="Array对象的静态方法"></a>Array对象的静态方法</h2><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><blockquote><p>1、Array.from(arrayLike[, mapFn[, thisArg]]) 方法从一个类似数组或<strong>可迭代对象</strong>创建一个<strong>新的</strong>，浅拷贝的数组实例。<br>2、from方法有一个可选参数 mapFn，可在最后生成的数组上再执行一次 map 方法然后再返回最终数组。即Array.from(obj, mapFn, thisArg) === Array.from(obj).map(mapFn, thisArg),<br>3、from() 的 length 属性为 1 ，即 Array.from.length === 1。<br>4、在 ES2015 中， Class 语法允许我们为内置类型（比如 Array）和自定义类新建子类（比如叫 SubArray）。这些子类也会继承父类的静态方法，比如 SubArray.from()，调用该方法后会返回子类 SubArray 的一个实例，而不是 Array 的实例。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//strign=>array</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"o"</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true">//set=>array</span><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true">//map=>array</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//map = {1 => 2, 2 => 4, 4 => 8}</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//arguments=>array</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true">//使用mapfn函数</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组去重合并<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">combin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> temparr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>temparr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> b<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token function">combin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><blockquote><p>Array.of(element0[, element1[, …[, elementN]]])方法返回一个新的Array数组实例<br>低版本的使用new Array创建Array实例时，只有一个参数和多个参数方法不一致，一个参数创建代表创建length为参数值的数组，多个参数代表一个数组中的各个元素，of方法解决了这个不一致的问题。</p></blockquote><ul><li><p>解决低版本new Array时的问题</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span>empty × <span class="token number">6</span><span class="token punctuation">]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>兼容低版本</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><blockquote><p>Array.isArray(object)方法判定传入对象是否是一个数组，返回Boolean值。</p></blockquote><pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token operator">></span> <span class="token boolean">true</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>Arary<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token operator">></span> <span class="token boolean">false</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>于instanceof类似，检测iframe时优于instanceof</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>xArray <span class="token operator">=</span> window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span>window<span class="token punctuation">.</span>frames<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Array<span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2,3]</span><span class="token comment" spellcheck="true">// Correctly checking for Array</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// Considered harmful, because doesn't work though iframes</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;使用jQuery框架时要对数组元素进行操作，突然忘了该如何入手，借着这个机会总结下常见的数组操作方法。&lt;/p&gt;
&lt;h2 id=&quot;Array原</summary>
      
    
    
    
    <category term="js" scheme="https://hyong1232.github.io/categories/js/"/>
    
    
    <category term="Array" scheme="https://hyong1232.github.io/tags/Array/"/>
    
    <category term="数组常用api" scheme="https://hyong1232.github.io/tags/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8api/"/>
    
  </entry>
  
  <entry>
    <title>webpack和babel在项目中的应用</title>
    <link href="https://hyong1232.github.io/2020/10/13/webpack-he-babel-zai-xiang-mu-zhong-de-ying-yong/"/>
    <id>https://hyong1232.github.io/2020/10/13/webpack-he-babel-zai-xiang-mu-zhong-de-ying-yong/</id>
    <published>2020-10-13T06:58:25.000Z</published>
    <updated>2020-12-17T11:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用vue-cli简单不少，但要是单纯想使用es6的打包工具webpack和转换代码工具的babel进行项目的打包转换，麻烦不少</p><a id="more"></a><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><pre class="line-numbers language-bash"><code class="language-bash">//如果项目文件夹存在，可以省略项目名称<span class="token function">npm</span> init -y <span class="token punctuation">[</span>项目名称<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用上述命令生成package.json文件，此文件主要记录了项目的依赖，版本号等信息。当项目丢失部分依赖时可使用npm install依照此记录重新安装依赖。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>webpack和babel的依赖包较多，且版本问题不兼容，很坑。直接使用固定版本命令安装</p><ul><li>安装babel的相关依赖</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D babel-core@6.26.x babel-loader@7.0.0 babel-plugin-transform-runtime@6.23.x babel-preset-env@1.7.x babel-polyfill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装webpack相关的依赖</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack@4.43.x webpack-cli@3.3.x webpack-dev-server@3.11.x html-webpack-plugin@4.3.x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装css和字体文件相关的依赖</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -D node-sass@4.14.x sass-loader@8.0.x css-loader@3.5.x file-loader@6.0.x style-loader@1.2.x url-loader@4.1.x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置wepack"><a href="#配置wepack" class="headerlink" title="配置wepack"></a>配置wepack</h2><p>配置需要使用的babel转换环境和wepack打包配置，项目入口生成文件存放路径等</p><p>1、在项目的根目录下创建webpack.config.js文件</p><p>2、在文件中写如下配置即可，项目运行时会自动读取此文件的配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//commonjs 导入文件格式</span><span class="token keyword">const</span> htmlwebpackplugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> htmlwebplugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlwebpackplugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    filename<span class="token punctuation">:</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//安装node-sass特殊命令npm install node-sass -D --sass-binary-site=http://npm.taobao.org/mirrors/node-sass</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span><span class="token string">'development'</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>htmlwebplugin<span class="token punctuation">]</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                 test<span class="token punctuation">:</span> <span class="token regex">/.js$/</span><span class="token punctuation">,</span>                 exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'env'</span><span class="token punctuation">,</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'transform-runtime'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            localIdentName<span class="token punctuation">:</span> <span class="token string">'[path][name]-[local]-[hash:5]'</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.ttf|woff|woff2|eot|svg$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'url-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// {test:/\.css$/,use:['style-loader','css-loader?modules&amp;localIdentName=[path][name]-[local]-[hash:5]']}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    resolve<span class="token punctuation">:</span><span class="token punctuation">{</span>        alias<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'@'</span><span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'$'</span><span class="token punctuation">:</span>__dirname        <span class="token punctuation">}</span><span class="token punctuation">,</span>        extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.jsx'</span><span class="token punctuation">,</span><span class="token string">'.json'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附上完整的package-json文件"><a href="#附上完整的package-json文件" class="headerlink" title="附上完整的package.json文件"></a>附上完整的package.json文件</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --port 8080 --hot --host 127.0.0.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.3"</span><span class="token punctuation">,</span>    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"^6.23.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-react"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-stage-0"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"create-react-class"</span><span class="token operator">:</span> <span class="token string">"^15.6.3"</span><span class="token punctuation">,</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^3.5.3"</span><span class="token punctuation">,</span>    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"prop-types"</span><span class="token operator">:</span> <span class="token string">"^15.7.2"</span><span class="token punctuation">,</span>    <span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"^8.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^1.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.43.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.11"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"^4.14.1"</span><span class="token punctuation">,</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.13.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.13.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;使用vue-cli简单不少，但要是单纯想使用es6的打包工具webpack和转换代码工具的babel进行项目的打包转换，麻烦不少&lt;/p&gt;</summary>
    
    
    
    <category term="node" scheme="https://hyong1232.github.io/categories/node/"/>
    
    
    <category term="babel" scheme="https://hyong1232.github.io/tags/babel/"/>
    
    <category term="wepack" scheme="https://hyong1232.github.io/tags/wepack/"/>
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="https://hyong1232.github.io/2020/10/11/python-han-shu/"/>
    <id>https://hyong1232.github.io/2020/10/11/python-han-shu/</id>
    <published>2020-10-11T03:12:06.000Z</published>
    <updated>2020-12-17T11:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>介绍</p><a id="more"></a><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li>默认会返回值是None不是null</li></ul><table><thead><tr><th>api</th><th>释义</th></tr></thead><tbody><tr><td>int(String)</td><td>将字符串转化成数字</td></tr><tr><td>abs(number)</td><td>将数字转换成绝对值</td></tr><tr><td>max(params1,params2….)</td><td>多个参数，返回最大值</td></tr><tr><td>instance(any)</td><td>返回字符的类型</td></tr></tbody></table><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><blockquote><p>按照类型分为五类：必填参数、默认参数、可变参数、关键字参数、命名关键字参数，他们的<strong>组合顺序也是如此</strong></p></blockquote><ul><li><p>默认参数<br>  1、不可设置为可变变量（只能string/数字/None等），参数重加在不会重新赋值，会重复引用之前初始化定义的值（与es6区别）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#错误的写法</span><span class="token keyword">def</span> <span class="token function">variable_paramter_func</span><span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正确的写法</span><span class="token keyword">def</span> <span class="token function">correct_variable_paramter_func</span><span class="token punctuation">(</span>l<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> l<span class="token punctuation">:</span>        l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span>variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印结果['end'] ['end''end']</span>correct_variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span>correct_variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印结果['end'] ['end']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  2、可为普通位置参数和命名关键字参数赋值，赋值后即可不传（使用默认值）</p></li><li><p>可变参数&amp;关键字参数的赋值分别使用*()|<em>[]和\</em>*{a:’a’}格式，且赋值会复制新的对象，不改变源数据</p></li><li><p>命名关键字再参数列表前必须要有<em>分割（可变参数或单独加一个\</em>参数），命名关键字也是函数调用时的必传值</p></li></ul><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>函数调用使用stack栈实现，调用一次栈增加一层，所以会有递归的栈溢出，使用尾递归优化方法（return时调用函数本身，将结算结果一并传入函数）<strong>pythong没有优化，使用不使用没区别</strong><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#尾递归优化：求100到1之和</span><span class="token keyword">def</span> <span class="token function">recursion_factorial</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> res  <span class="token keyword">return</span> recursion_factorial<span class="token punctuation">(</span>num<span class="token number">-1</span><span class="token punctuation">,</span> res<span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>recursion_factorial<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出5050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;介绍&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://hyong1232.github.io/categories/python/"/>
    
    
    <category term="python函数" scheme="https://hyong1232.github.io/tags/python%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python的list和tuple</title>
    <link href="https://hyong1232.github.io/2020/10/11/python-de-list-he-tuple/"/>
    <id>https://hyong1232.github.io/2020/10/11/python-de-list-he-tuple/</id>
    <published>2020-10-10T16:29:18.000Z</published>
    <updated>2020-12-17T11:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>python中的list和tuple对象的基本用法，及常用api</p><a id="more"></a><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul><li>下标取/存值</li><li>pop([index])删除值（默认最后一位）</li><li>append(ele)添加元素至list末尾</li><li>insert(index,object)插入元素至指定位置</li></ul><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><ul><li>定义了就不可修改（类似es6的const关键字定义变量？）</li><li>在函数中应用：返回值是省略了小括号的元组，因此可以返回多个值<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_multi_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'jack'</span>age<span class="token punctuation">,</span>name <span class="token operator">=</span> return_multi_params<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#name = 'jack',age=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li>if x:简写，判定不为空值|空字符串|<strong>空的list</strong> </li><li>elif 是else if简写</li><li>input([‘输出string’])函数，接收用户输入信息</li><li>int(string)&amp;str(num)字符转整数&amp;整数转字符函数</li></ul><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li>遍历每一个list，for variable in list:</li><li>while 条件:</li><li>break/continue</li></ul><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ul><li>初始化就是写一个json对</li><li>和list对比查找速度快，浪费空间（空间换时间）</li><li>pop([index])同list</li><li>get(key)==map[key]获取键对应值</li><li>key不可变（不能为list，可为string、整数）</li><li>储存的元素无序</li></ul><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li>储存的元素无序</li><li>创建:set([ele]),元组里面放一个list</li><li>元素不可变（可变对象难以比较是否相等，无法保证元素唯一性）</li><li>remove(key)</li><li>add(key)</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;python中的list和tuple对象的基本用法，及常用api&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://hyong1232.github.io/categories/python/"/>
    
    
    <category term="list" scheme="https://hyong1232.github.io/tags/list/"/>
    
    <category term="tuple" scheme="https://hyong1232.github.io/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>python基本数据类型</title>
    <link href="https://hyong1232.github.io/2020/10/10/python-ji-ben-shu-ju-lei-xing/"/>
    <id>https://hyong1232.github.io/2020/10/10/python-ji-ben-shu-ju-lei-xing/</id>
    <published>2020-10-10T15:02:42.000Z</published>
    <updated>2020-12-17T11:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>决心开始认真系统学习python，基本数据类型开始，记录自己感觉重要的知识点。</p><a id="more"></a><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><ul><li><p>十六进制ox开头</p></li><li><p>允许使用_下划线分割多个0的大数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#等效写法</span>100_000_000 <span class="token operator">==</span> <span class="token number">100000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>整数运算永远是精确计算（除法也是），浮点数计算会有四舍五入误差</p></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>定义：使用单引号’’和双引号””包裹起来的数据</p></li><li><p>字符串和整数不可变，任何操作不会改变源数据，而是创建新的数据</p></li><li><p>使用’’’multi-line-string’’’包裹，表示多行字符串</p></li><li><p>默认会对包含\符号的字符转义转义，在字符串前加上r则不会转义</p></li><li><p><strong>字符串中的格式化处理</strong><br>  1、使用%占位符处理<br>  规则：字符串里面使用上述字符占位，在结尾使用%(replacement1,replacement2…)替换</p><table><thead><tr><th>字符</th><th>释义</th></tr></thead><tbody><tr><td>%s</td><td>普通字符</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%d</td><td>整数</td></tr><tr><td>%x</td><td>十六进制数</td></tr></tbody></table><p>  示例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is %d year\'s old,he have $%f'</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3456345643.234</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用%%转义%</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%%%d'</span><span class="token operator">%</span><span class="token number">25</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <strong>在字符串中可加入整数/浮点数在%和特定字符间对数据输出位数处理</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#整数数字表示占位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%3d'</span><span class="token operator">%</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#浮点数对浮点数的位数处理</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.2f'</span><span class="token operator">%</span><span class="token number">12.23453</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  2、使用string类型的format函数配合{}</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is {} year\'s old,he have ${}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3456345643.234</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  3、在字符串前加上f，然后使用{变量名}，自动替换字符串（类似es6中的反引号字符串）</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'jack'</span>age <span class="token operator">=</span> <span class="token number">23</span>money <span class="token operator">=</span> <span class="token number">3456345643.234</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{name} is {age} year\'s old,he have ${money}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="布尔值Boolean"><a href="#布尔值Boolean" class="headerlink" title="布尔值Boolean"></a>布尔值Boolean</h2><ul><li>值表示是首字符大写<pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">False</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="空置None"><a href="#空置None" class="headerlink" title="空置None"></a>空置None</h2><ul><li>与js的null区别开</li></ul><h2 id="变量-amp-amp-常量"><a href="#变量-amp-amp-常量" class="headerlink" title="变量&amp;&amp;常量"></a>变量&amp;&amp;常量</h2><ul><li>变量不必声明，常量的变量名称全部大写（说是常量其实随时可变）</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>使用#做标志</p></li><li><p>通用注释</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#告诉python解释器（cpython用的最多）以utf-8格式读取文件</span><span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>#告诉Linux和mac是一个可执行的python文件（win不支持）<br>#!user/bin/env python3<br>```</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;决心开始认真系统学习python，基本数据类型开始，记录自己感觉重要的知识点。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://hyong1232.github.io/categories/python/"/>
    
    
    <category term="基本数据类型" scheme="https://hyong1232.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>HashMap简单梳理</title>
    <link href="https://hyong1232.github.io/2020/10/09/hashmap-jian-dan-shu-li/"/>
    <id>https://hyong1232.github.io/2020/10/09/hashmap-jian-dan-shu-li/</id>
    <published>2020-10-08T16:05:21.000Z</published>
    <updated>2020-12-17T11:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>第八天，决心改掉恶习，加油！</p><a id="more"></a><h2 id="HashMap常用api"><a href="#HashMap常用api" class="headerlink" title="HashMap常用api"></a>HashMap常用api</h2><table><thead><tr><th>api</th><th>释义</th><th>返回值</th></tr></thead><tbody><tr><td>get(key)</td><td>获取指定键值对应的值，key为未保存的值时返回null值</td><td>正常指定键对应的值，key不存在返回null值</td></tr><tr><td>put(key,value)</td><td>添加指定的键值对，key和value均可为null值，重复保存相同的键而值不同则会覆盖</td><td>正常null，覆盖保存返回被覆盖的值</td></tr><tr><td>remove(key)</td><td>删除指定键值对，key为未保存的值时返回null值</td><td>被删除的值</td></tr><tr><td>size()</td><td>获取map存储的键值对个数</td><td>-</td></tr></tbody></table><h2 id="Hash运算过程"><a href="#Hash运算过程" class="headerlink" title="Hash运算过程"></a>Hash运算过程</h2><p>HashMap特性：</p><ul><li>内部由table数组组成，而每个键值对都会被封装成一个entry对象进行存储</li><li>初始化数组大小为16</li><li>增长大小为length*2+2</li><li>负载因子为0.75</li></ul><p>HashMap的存储过程简单可以总结成一下几步</p><blockquote><p>1、调用一个要存储键值对的key.hashCode()方法获取hash值，结合数组的长度计算出存放的效标位置<br> 2、将要存储的键值对封装成entry对象，并放入对应下标位置<br> 3、如果下标位置有值则用key.equals()方法比较键是否相等，若相等则替换值，否则将新键值对用链表方式连接起来。<br> 4、如果链表的长度超过了8则将链表转换成红黑树存储（jdk1.8）<br> 5、当量表的长度减少到6则又将红黑树转化成链表<br> 6、当table的负载因子（加载率）达到了0.75则扩大table的容量（2*length+2）</p></blockquote><h2 id="hash算法重写"><a href="#hash算法重写" class="headerlink" title="hash算法重写"></a>hash算法重写</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   r <span class="token operator">=</span> r <span class="token operator">*</span> p <span class="token operator">+</span> x<span class="token punctuation">;</span>   r <span class="token operator">=</span> r <span class="token operator">*</span> p <span class="token operator">+</span> y<span class="token punctuation">;</span>   <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//尽量使hash值分散开</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       Point p <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>       <span class="token keyword">return</span> x <span class="token operator">==</span> p<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="iterator迭代器"><a href="#iterator迭代器" class="headerlink" title="iterator迭代器"></a>iterator迭代器</h2><blockquote><p>常用api</p></blockquote><table><thead><tr><th>名称</th><th>释义</th></tr></thead><tbody><tr><td>next()</td><td>取出下一个数据元素</td></tr><tr><td>remove()</td><td>去除next方法取出的数据元素（要先取出数据元素，即调用next方法之后才能使用）</td></tr><tr><td>hasNext()</td><td>是否有下一个数据元素</td></tr></tbody></table><p><strong>注意</strong>不能在使用iterator便利店时使用集合本身进行增删操作！！！</p><h2 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h2><p>由于HashMap本身没有提供遍历自身的方法，需要借助key的迭代器来遍历或者直接遍历key的Set来实现</p><pre class="line-numbers language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">,</span> <span class="token string">"唐伯虎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历器实现</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历Set实现</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Integer in <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;第八天，决心改掉恶习，加油！&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="collections" scheme="https://hyong1232.github.io/tags/collections/"/>
    
    <category term="HashMap" scheme="https://hyong1232.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="https://hyong1232.github.io/2020/10/07/npm-chang-yong-ming-ling/"/>
    <id>https://hyong1232.github.io/2020/10/07/npm-chang-yong-ming-ling/</id>
    <published>2020-10-07T03:56:29.000Z</published>
    <updated>2020-12-17T11:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>npm包管理工具的命令较多，记录下常用的命令</p><a id="more"></a><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>详见 <strong><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm使用指南</a></strong> 阮一峰先生写的npm原理很清楚，通俗易懂。总结起来就是在运行npm run+关键字的命令时，npm会自动创建一个shell，同时将/node_moudles/.bin文件加到Path路径下，从而执行.bin文件里面的脚本代码（支持所有shell脚本，不仅是node的脚本）</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>释义</th><th>简写</th></tr></thead><tbody><tr><td>npm install</td><td>初始化项目/安装项目的依赖</td><td>-</td></tr><tr><td>npm install -y</td><td>初始化项目，创建package.json文件（执行默认选项）</td><td>-</td></tr><tr><td>npm install [包名@版本号] [--global]</td><td>安装指定名称的依赖（可指定以来的版本），首次安装会自动创建node_modules文件夹（所有依赖均安装至此），global关键字指定是否是全局安装</td><td>npm i -g [包名@版本号]</td></tr><tr><td>npm run [script]</td><td>执行package.json文件中指定的脚本</td><td>-</td></tr><tr><td>npm install –save-dev [包名@版本号]</td><td>安装依赖并只在开发阶段使用，会在packjson的devDependencies属性下做标识（不加--save会在dependencies属性下做标识）</td><td>npm i -D [包名@版本号]</td></tr><tr><td>npm help</td><td>查询所有的npm命令</td><td>-</td></tr><tr><td>npm uninstall –save [包名@版本号]</td><td>卸载依赖，并清除package.json中的文本中dependencies属性下记录的依赖信息</td><td>npm un -S [包名@版本号]</td></tr><tr><td>npm uninstall –save-dev [包名@版本号]</td><td>卸载node_moudles下的依赖文件，并清除devDependencies属性下记录的依赖信息</td><td>npm un -D [包名@版本号]</td></tr><tr><td>npm update [-g] [包名@版本号]</td><td>升级依赖包（可升级全局安装的依赖）</td><td>-</td></tr><tr><td>npm i -g cnpm</td><td>安装淘宝npm镜像</td><td>-</td></tr><tr><td>npm i -S [包名@版本号] –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td><td>从淘宝镜像源安装依赖</td><td>-</td></tr><tr><td>npm confit set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td><td>设置npm安装依赖的路径为淘宝镜像源</td><td>-</td></tr><tr><td>npm config list</td><td>显示npm配置列表</td><td>-</td></tr><tr><td>npm config ls -l</td><td>显示所有npm配置列表</td><td>-</td></tr></tbody></table><ul><li>关于npx可见<strong>阮一峰先生的教程<a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">npx使用教程</a></strong></li><li>安装多个依赖使用空格隔开依赖包名称即可</li><li>使用&amp;链接多个npm命令——不分先后同时执行，使用&amp;&amp;链接多个npm命令——依次执行npm命令</li></ul><h3 id="依赖包版本号中的特殊字符"><a href="#依赖包版本号中的特殊字符" class="headerlink" title="依赖包版本号中的特殊字符"></a>依赖包版本号中的特殊字符</h3><blockquote><p>依赖包的后面可接版本号，通常格式为；包名+特殊字符+版本号[major, minor, patch]</p></blockquote><p>1、特殊字符^<br>详见**二不挂五先生的文章<a href="https://zhuanlan.zhihu.com/p/66039729">npm install 版本号^的坑</a>**，简单点来说就是^标识的范围是版本号[major, minor, patch]中从左到右第一个非0位开始，小于此非零位+1的版本号</p><pre class="line-numbers language-bash"><code class="language-bash">^1.2.3版本包括：<span class="token operator">>=</span> 1.2.3 并且 <span class="token operator">&lt;</span> 2.0.0^0.2.3版本包括：<span class="token operator">>=</span> 0.2.3 并且 <span class="token operator">&lt;</span> 0.3.0^0.0.3版本包括：<span class="token operator">>=</span> 0.0.3 并且 <span class="token operator">&lt;</span> 0.0.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、特殊字符~<br>与^类似，~字符则指定匹配版本号[major, minor, patch]中最新的patch位包依赖（方便修复小bug后依然适用于代码）</p><pre class="line-numbers language-bash"><code class="language-bash">~1.2.3版本包括：<span class="token operator">>=</span> 1.2.3 并且 <span class="token operator">&lt;</span> 1.3.0~0.2.3版本包括：<span class="token operator">>=</span> 0.2.3 并且 <span class="token operator">&lt;</span> 0.3.0~0.0.3版本包括：<span class="token operator">>=</span> 0.0.3 并且 <span class="token operator">&lt;</span> 0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、特殊字符@<br>在@后面可以添加具体的版本号，以指定依赖包的确切版本，@latest表示安装最新的依赖包</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;npm包管理工具的命令较多，记录下常用的命令&lt;/p&gt;</summary>
    
    
    
    <category term="node" scheme="https://hyong1232.github.io/categories/node/"/>
    
    
    <category term="npm" scheme="https://hyong1232.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli使用</title>
    <link href="https://hyong1232.github.io/2020/09/26/vue-cli-shi-yong/"/>
    <id>https://hyong1232.github.io/2020/09/26/vue-cli-shi-yong/</id>
    <published>2020-09-26T11:22:10.000Z</published>
    <updated>2020-12-17T11:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于vue-cli的升级较快，记录下变化</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#全局安装</span><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli<span class="token comment" spellcheck="true">#升级项目中的cli相关模块</span><span class="token comment" spellcheck="true">#vue  upgrade [options] [plugin-name]</span><span class="token comment" spellcheck="true">#（试用）升级 Vue CLI 服务及插件</span><span class="token comment" spellcheck="true">#选项：</span>  -t, --to <span class="token operator">&lt;</span>version<span class="token operator">></span>    升级 <span class="token operator">&lt;</span>plugin-name<span class="token operator">></span> 到指定的版本  -f, --from <span class="token operator">&lt;</span>version<span class="token operator">></span>  跳过本地版本检测，默认插件是从此处指定的版本升级上来  -r, --registry <span class="token operator">&lt;</span>url<span class="token operator">></span>  使用指定的 registry 地址安装依赖  --all                 升级所有的插件  --next                检查插件新版本时，包括 alpha/beta/rc 版本在内  -h, --help            输出帮助内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-bash"><code class="language-bash">vue create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>app-name<span class="token operator">></span><span class="token comment" spellcheck="true">#创建一个由 `vue-cli-service` 提供支持的新项目</span><span class="token comment" spellcheck="true">#选项：</span>  -p, --preset <span class="token operator">&lt;</span>presetName<span class="token operator">></span>       忽略提示符并使用已保存的或远程的预设选项  -d, --default                   忽略提示符并使用默认预设选项  -i, --inlinePreset <span class="token operator">&lt;</span>json<span class="token operator">></span>       忽略提示符并使用内联的 JSON 字符串预设选项  -m, --packageManager <span class="token operator">&lt;</span>command<span class="token operator">></span>  在安装依赖时使用指定的 <span class="token function">npm</span> 客户端  -r, --registry <span class="token operator">&lt;</span>url<span class="token operator">></span>            在安装依赖时使用指定的 <span class="token function">npm</span> registry  -g, --git <span class="token punctuation">[</span>message<span class="token punctuation">]</span>             强制 / 跳过 <span class="token function">git</span> 初始化，并可选的指定初始化提交信息  -n, --no-git                    跳过 <span class="token function">git</span> 初始化  -f, --force                     覆写目标目录可能存在的配置  -c, --clone                     使用 <span class="token function">git</span> clone 获取远程预设选项  -x, --proxy                     使用指定的代理创建项目  -b, --bare                      创建项目时省略默认组件中的新手指导信息  -h, --help                      输出使用帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要使用vue-init功能，安装@vue/cli-init包即可</li><li>使用图像化创建项目<pre class="line-numbers language-bash"><code class="language-bash">vue ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;用于vue-cli的升级较快，记录下变化&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://hyong1232.github.io/categories/vue/"/>
    
    
    <category term="vue-cli" scheme="https://hyong1232.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>vue文档记录</title>
    <link href="https://hyong1232.github.io/2020/09/25/vue-wen-dang-ji-lu/"/>
    <id>https://hyong1232.github.io/2020/09/25/vue-wen-dang-ji-lu/</id>
    <published>2020-09-25T02:51:57.000Z</published>
    <updated>2020-12-17T11:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开始重新阅读vue官方文档，记录下重点内容，加强理解和记忆。</p><a id="more"></a><h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><p>1、使用场景：模板内表达式的复杂计算</p><p>2、特性：响应式计算（不重复计算相同值，缓存响应式的依赖，即data中的值改变才重新计算，否则使用缓存值）优于方法和watch监听属性</p><p>示例：<br>···js<br>var vm = new Vue({<br>    data:{<br>        firstname:’foo’,<br>        lastname:’bar’<br>    },<br>    computed:{<br>        fullname(){<br>            return this.firstname+’  ‘+this.lastname<br>        }<br>    },<br>    template:<code>        &lt;div&gt;&#123;&#123;fullname&#125;&#125;&lt;/div&gt;    </code><br>}).$mount(‘#app’)<br>···</p><p>3、自定义setter方法：一般计算属性默认只有getter方法，但支持添加setter方法，example<br>···js<br>…<br>computed:{<br>    fullname:{<br>        get:function(){<br>            return this.firstname+’ ‘+this.lastname<br>        },<br>        set:function(newVal){<br>            let nameArr = newVal.split(‘ ‘)<br>            this.firstname = nameArr[0]<br>            this.lastname = nameArr[nameArr.length-1]<br>        }<br>    }<br>}<br>…<br>//改变fullname则会调用setter方法<br>vm.fullname = ‘jack ma’<br>···</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;开始重新阅读vue官方文档，记录下重点内容，加强理解和记忆。&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://hyong1232.github.io/categories/vue/"/>
    
    
    <category term="vue文档" scheme="https://hyong1232.github.io/tags/vue%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>常用css设置</title>
    <link href="https://hyong1232.github.io/2020/09/24/chang-yong-css-she-zhi/"/>
    <id>https://hyong1232.github.io/2020/09/24/chang-yong-css-she-zhi/</id>
    <published>2020-09-24T01:58:33.000Z</published>
    <updated>2020-12-17T11:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>列举常见的css命令，用于特定的功能。</p><a id="more"></a><h2 id="文本用超过使用…表示"><a href="#文本用超过使用…表示" class="headerlink" title="文本用超过使用…表示"></a>文本用超过使用…表示</h2><p>1、单行显示省略号</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>//使用省略号代替截断文字    <span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span>//不换行<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、多行显示（适用于chrome内核的浏览器）</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>//显示格式为弹性伸缩盒子    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>//元素内部排列方式    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>//显示的文本行数（非标准属性，与上面两个属性结合才可使用）<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将元素设置为吸顶模式"><a href="#将元素设置为吸顶模式" class="headerlink" title="将元素设置为吸顶模式"></a>将元素设置为吸顶模式</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>sticky<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将元素设置为内敛模式"><a href="#将元素设置为内敛模式" class="headerlink" title="将元素设置为内敛模式"></a>将元素设置为内敛模式</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span>content-box<span class="token punctuation">;</span>默认    <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>//设置为内敛模式<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;列举常见的css命令，用于特定的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="https://hyong1232.github.io/categories/css/"/>
    
    
    <category term="css常用设置" scheme="https://hyong1232.github.io/tags/css%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Object.assign函数</title>
    <link href="https://hyong1232.github.io/2020/09/23/object-assign-han-shu/"/>
    <id>https://hyong1232.github.io/2020/09/23/object-assign-han-shu/</id>
    <published>2020-09-23T09:05:02.000Z</published>
    <updated>2020-12-17T11:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>**Object.assign()**方法使用target的setter方法和origin对象的getter方法，复制对象可枚举的属性值，适用于很多的object操作。</p><a id="more"></a><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>1、复制对象值，并返回新创建新对象</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、为对象添加新属性</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>orgin<span class="token punctuation">,</span><span class="token punctuation">{</span>add<span class="token punctuation">:</span><span class="token string">'add'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、为对象添加新方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span><span class="token string">'val'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><p>1、由于Object.assign采用的是浅拷贝，因此源对象的属性值是对象时，只是复制了引用，再后面的复制中出现此对象的修改，则直接替换他的引用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、不能复制origin源对象的继承属性，只能同通过Object.getPrototypeOf(origin)+Object.create()+origin方法，将其继承的方法单独调出来，然后合并</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> originProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originProto<span class="token punctuation">)</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、target/orgin对象为非对象</p><ul><li> target为非对象，转换成对象，如果是null/undefined不可转换成对象的属性时，报错</li><li>origin为非对象时，自动转换，如果是null/undefined不可转换成对象的属性时，直接跳过</li></ul><p>4、数组处理</p><blockquote><p>将数组当成对象处理，键值为index下标</p></blockquote><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、取值函数处理（关键字get开头）</p><blockquote><p>直接取值，不会获取取值函数合并</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> name <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'jack'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;**Object.assign()**方法使用target的setter方法和origin对象的getter方法，复制对象可枚举的属性值，适用于很多的object操作。&lt;/p&gt;</summary>
    
    
    
    <category term="es6" scheme="https://hyong1232.github.io/categories/es6/"/>
    
    
    <category term="Object操作" scheme="https://hyong1232.github.io/tags/Object%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
</feed>
